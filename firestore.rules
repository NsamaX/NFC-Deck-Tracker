rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Match user space
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;

      // collections
      match /collections/{collectionId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;

        // cards within collection
        match /cards/{cardId} {
          allow read, write: if request.auth != null && request.auth.uid == userId;
        }
      }

      // decks
      match /decks/{deckId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      // records
      match /records/{recordId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // rooms (public match, outside /users)
    match /rooms/{roomId} {
      allow create: if request.auth != null
        && request.resource.data.playerIds.size() == 2
        && request.resource.data.playerIds.hasAny([request.auth.uid]);

      allow read, delete: if request.auth != null
        && request.auth.uid in resource.data.playerIds
        && resource.data.confirmed[resource.data.playerIds[0]] == true
        && resource.data.confirmed[resource.data.playerIds[1]] == true;

      allow update: if request.auth != null
        && request.auth.uid in resource.data.playerIds;

      match /records/{recordId} {
        allow read, write: if request.auth != null
          && request.auth.uid in resource.data.playerIds;
      }

      match /cards/{cardId} {
        allow read, write: if request.auth != null
          && request.auth.uid in resource.data.playerIds;
      }
    }
  }
}

service firebase.storage {
  match /b/{bucket}/o {
    match /users/{userId}/images/{fileName} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
  }
}
